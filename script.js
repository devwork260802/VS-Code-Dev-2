window.addEventListener("DOMContentLoaded", () => {<br>const n = new Notifications("#notifications");<br>});<br>class Notifications {<br>constructor(qs) {<br>this.el = document.querySelector(qs);<br>this.badge = null;<br>this.items = 0;<br>this.timeout = null;<br>this.init();<br>}<br>init() {<br>if (this.el) {<br>this.el.addEventListener("click", this.read.bind(this));<br>this.badge = this.el.querySelector("[data-badge]");<br>this.reset(1);<br>}<br>}<br>read() {<br>if (this.items > 0) {<br>this.items = 0;<br>this.el.classList.remove("notifications--active");<br>this.badge.innerHTML = "";<br>const items = this.random(1, 10, true);<br>clearTimeout(this.timeout);<br>this.timeout = setTimeout(this.reset.bind(this, items), 2e3);<br>}<br>}<br>reset(items) {<br>this.items = items;<br>if (this.items > 0) {<br>this.el.classList.add("notifications--active");<br>this.badge.innerHTML = this.items;<br>}<br>}<br>random(min, max, round = false) {<br>const percent = crypto.getRandomValues(new Uint32Array(1))[0] / 2 ** 32;<br>const relativeValue = (max - min) * percent;<br>return (<br>min +<br>(round === true<br>? Math.round(relativeValue)<br>: +relativeValue.toFixed(2))<br>);<br>}<br>} 
